CSC C85 - Code Optimization - 2021
_______________________________________________________________________

Team name:

Name 1 (last, first):kourosh jebari 
Student number 1:1005947362

Name 2 (last, first):krutik shah
Student number 2:1006213526

If applicable:
Name 3 (last, first): mohammad rahman
Student number 3: 1006467930

(Special: Lose marks for failing to complete the above)
_______________________________________________________________________

Questions:

0) On the same computer, and with no other applications open:

   - Run vanilla version, compiled as per the compile script (no compiler
     optimization) and list: Vanilla (no compiler opt) FPS = 6.133333
     
   - Run your optimized code, compiled without compiler optimization
     and list: Your Code (no compiler opt) FPS =10.200000

   - Run vanilla code compiled with flag -O3 for compiler optimization
     and list: Vanilla (compiler optimized) FPS =8.266667
     
   - Run your optimized code, compiled with flag -O3
     and list: Your Code (compiler optimized) FPS =32.133333
     
     What is the ratio of your code (compiler optimized) to vanilla
     with no compiler optimization?
     
     Ratio = Vanilla(no compiler opt) FPS / Your code(compiler optimized) FPS
           =0.190871369

     I think you meant it the other way arround so
      my code(compiler optimezed)/vanila(no optimization) =  5.2391304    
     
a) Look at the profiler output for vanilla_imageRescale(). Identify the
   lines that you think are un-necessary bottlenecks (i.e. lines whose
   CPU usage can be reduced or eliminated by careful coding).

   List these bottleneck lines in descending order (i.e. the ones that
   consume most time at the top) of CPU time. Please list
	- The actual line of code
	- The amount of time taken
	(you can copy/paste from the profiler output)


   getPixel(src,floor(fx),floor(fy),src_x,&R1,&G1,&B1);  // get N1 colours
   16588800 calls to 0x109200 (floor)
   8294400 calls to getPixel
   this line creates a bottle neck as there are 3 function calls, needing the cpu to jup arround the instruction stack and adding/removing things to the call stack. The jumping arround also makes it harder to use pre cached instrctions. These calls are also happening every iteration, thus the cpu is constantly in state of flux, jumping from function to function.

   getPixel(src,ceil(fx),ceil(fy),src_x,&R4,&G4,&B4); // get N4 colours
   16588800 calls to 0x109230 (ceil)
   8294400 calls to getPixel
   this line creates a bottle neck as there are 3 function calls, needing the cpu to jup arround the instruction stack and adding/removing things to the call stack. The jumping arround also makes it harder to use pre cached instrctions. These calls are also happening every iteration, thus the cpu is constantly in state of flux, jumping from function to function.

   getPixel(src,ceil(fx),floor(fy),src_x,&R2,&G2,&B2);   // get N2 colours
   8294400 calls to 0x109200 (floor)
   8294400 calls to 0x109230 (ceil)
   8294400 calls to getPixel
   this line creates a bottle neck as there are 3 function calls, needing the cpu to jup arround the instruction stack and adding/removing things to the call stack. The jumping arround also makes it harder to use pre cached instrctions. These calls are also happening every iteration, thus the cpu is constantly in state of flux, jumping from function to function.

   getPixel(src,floor(fx),ceil(fy),src_x,&R3,&G3,&B3);   // get N3 colours
   8294400 calls to 0x109200 (floor)
   8294400 calls to 0x109230 (ceil)
   8294400 calls to getPixel
   this line creates a bottle neck as there are 3 function calls, needing the cpu to jup arround the instruction stack and adding/removing things to the call stack. The jumping arround also makes it harder to use pre cached instrctions. These calls are also happening every iteration, thus the cpu is constantly in state of flux, jumping from function to function.

   setPixel(dst,x,y,dest_x,R,G,B)
   8294400 calls to setPixel
   tis is a function that is being called every iteration, making the cpu jump arround a lot.

   For each line, explain why the line creates a bottleneck (in terms
   of what you know about CPU architecture). I want specific reasons
   why a line you listed takes a large chunk of CPU time.

b) For each of the lines in a)

   Describe what you did in fast_imageRescale() to reduce/resolve the
   problem.

   Explain why your improvement should work (again, based on what you
   know about CPU architecture).

   First, i inlined all the getPixel and setPixel calls, this caused the instruction pointer to not jump arround as much. That helped the CPU function better as it just went down linearly and follow the natural order of the code. I also removed the redundent calulations of flor and ciel. After calcutlating flor once, i could compute ceil based on the floor value. That reduced function cals and also reduce the computations performed too.

c) List any other optimizations you performed in your code and why they
   help increase speed

   I moved some calculations outside the inner loop as they only needed to be re-calculated whenever y changed. this minorly reduces the nukber of operations performed 

d) Is there any part of the vanilla code that could not be optimized
   at all? if so, which?

   The casting to and from unsigned int, this was unavoidable bcs of the nature of the algorithm. The big ) notation was also unavoidable for this algo rythm.
   
e) Now run your code with cache sim on. Identify the lines that you see
   causing cache misses, and for each of these please list:
   
    - The line of code
    - The number of cache misses it caused
    (you can copy/paste from the profiler output)
    
    getPixel(src,floor(fx),ceil(fy),src_x,&R3,&G3,&B3);
    891 433 misses

    setPixel(dst,x,y,dest_x,R,G,B);
    4276799 write misses

   Describe any strategy you can come up with that may help reduce these
   cache misses.

   right now the code is for each x: for each y:, but its better for the cache to go for each y: for each x: bcs a change in x results in moving 1 spce in memory but a change in y results in moving many spaces in memory

f) Do you think you have achieved close to optimal performance on this
   code? (yes/no)
    no

g) If your answer to d) is no, what could you do to further increase
   performance?

   my code still has a bunch of cache misses that i can optimize. There is also some redundant calculations i am performing. i am not smart enought to figure that stuff out rn lol.

______________________________________________________________________

Grading

Programming exercise
	- Competitive performance of your code	 	/80	
             Your FPS multiplier:     (Max:  )

Answers in this report					        /20

Penalty marks (TA assigned)			  

Total for this exercise:			   	/100 (*)

(*) This mark is conditional to all team members being able to explain
    any part of the work when questioned.
